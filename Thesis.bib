@article{DBLP:journals/informaticaSI/Hedin00,
  author    = {G{\"{o}}rel Hedin},
  title     = {Reference Attributed Grammars},
  journal   = {Informatica (Slovenia)},
  volume    = {24},
  number    = {3},
  year      = {2000},
  timestamp = {Mon, 15 Feb 2016 15:01:43 +0100},
  biburl    = {https://dblp.org/rec/journals/informaticaSI/Hedin00.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/oopsla/EkmanH07,
  author    = {Torbj{\"{o}}rn Ekman and
               G{\"{o}}rel Hedin},
  editor    = {Richard P. Gabriel and
               David F. Bacon and
               Cristina Videira Lopes and
               Guy L. Steele Jr.},
  title     = {The jastadd extensible java compiler},
  booktitle = {Proceedings of the 22nd Annual {ACM} {SIGPLAN} Conference on Object-Oriented
               Programming, Systems, Languages, and Applications, {OOPSLA} 2007,
               October 21-25, 2007, Montreal, Quebec, Canada},
  pages     = {1--18},
  publisher = {{ACM}},
  year      = {2007},
  url       = {https://doi.org/10.1145/1297027.1297029},
  doi       = {10.1145/1297027.1297029},
  timestamp = {Fri, 25 Jun 2021 14:48:54 +0200},
  biburl    = {https://dblp.org/rec/conf/oopsla/EkmanH07.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/entcs/HedinM01,
  author    = {G{\"{o}}rel Hedin and
               Eva Magnusson},
  title     = {JastAdd - a Java-based system for implementing front ends},
  journal   = {Electron. Notes Theor. Comput. Sci.},
  volume    = {44},
  number    = {2},
  pages     = {59--78},
  year      = {2001},
  url       = {https://doi.org/10.1016/S1571-0661(04)80920-4},
  doi       = {10.1016/S1571-0661(04)80920-4},
  timestamp = {Fri, 12 Feb 2021 22:17:06 +0100},
  biburl    = {https://dblp.org/rec/journals/entcs/HedinM01.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{allen1970control,
  title     = {Control flow analysis},
  author    = {Allen, Frances E},
  journal   = {ACM Sigplan Notices},
  volume    = {5},
  number    = {7},
  pages     = {1--19},
  year      = {1970},
  publisher = {ACM New York, NY, USA}
}

@book{aho2007compilers,
  title     = {Compilers: principles, techniques, \& tools},
  author    = {Aho, Alfred V and Lam, Monica S and Sethi, Ravi and Ullman, Jeffrey D},
  year      = {2007},
  publisher = {Pearson Education India}
}

@book{appel2004modern,
  title     = {Modern compiler implementation in C},
  author    = {Appel, Andrew W},
  year      = {2004},
  publisher = {Cambridge university press}
}

@article{ayewah2008using,
  title     = {Using static analysis to find bugs},
  author    = {Ayewah, Nathaniel and Pugh, William and Hovemeyer, David and Morgenthaler, J David and Penix, John},
  journal   = {IEEE software},
  volume    = {25},
  number    = {5},
  pages     = {22--29},
  year      = {2008},
  publisher = {IEEE}
}


@inproceedings{LLVM,
  author={Lattner, C. and Adve, V.},
  booktitle={International Symposium on Code Generation and Optimization, 2004. CGO 2004.}, 
  title={LLVM: a compilation framework for lifelong program analysis \& transformation}, 
  year={2004},
  volume={},
  number={},
  pages={75-86},
  doi={10.1109/CGO.2004.1281665}
}

@book{javaBytecode,
  title={The Java Virtual Machine Specification, Java SE 7 Edition: Java Virt Mach Spec Java\_3},
  author={Lindholm, Tim and Yellin, Frank and Bracha, Gilad and Buckley, Alex},
  year={2013},
  publisher={Addison-Wesley}
}


@article{kam1977monotone,
  title={Monotone data flow analysis frameworks},
  author={Kam, John B and Ullman, Jeffrey D},
  journal={Acta informatica},
  volume={7},
  number={3},
  pages={305--317},
  year={1977},
  publisher={Springer}
}

@Misc{spa,
  author =       {Anders M\o{}ller and Michael I. Schwartzbach},
  title =        {Static Program Analysis},
  year =         {2018},
  month =        {October},
  note =         {Department of Computer Science, Aarhus University},
  url =                {\url{http://cs.au.dk/\~{}amoeller/spa/}},
  howpublished={\url{http://cs.au.dk/\~amoeller/spa/}}
}

@article{knuth1968semantics,
  title={Semantics of context-free languages},
  author={Knuth, Donald E},
  journal={Mathematical systems theory},
  volume={2},
  number={2},
  pages={127--145},
  year={1968},
  publisher={Springer}
}



@article{Sayar_2022,
  doi = {10.1145/3554732},
  url = {https://doi.org/10.1145%2F3554732},
  year = 2022,
  month = {aug},
  publisher = {Association for Computing Machinery ({ACM})},
  author = {Imen Sayar and Alexandre Bartel and Eric Bodden and Yves Le Traon},
  title = {An In-depth Study of Java Deserialization Remote-Code Execution Exploits and Vulnerabilities},
  journal = {{ACM} Transactions on Software Engineering and Methodology}
}

@book{khedker2017data,
  title={Data flow analysis: theory and practice},
  author={Khedker, Uday and Sanyal, Amitabha and Sathe, Bageshri},
  year={2017},
  publisher={CRC Press}
}

@misc{sonarqube,
author = {SonarSource},
title = {SonarQube: Continuous Code Quality},
publisher = {SonarSource},
note = {Accessed: 2023-01-27},
howpublished = {\url{https://www.sonarqube.org/}}
}

@misc{Valgrind,
title={Valgrind: A Framework for Memory Debugging, Profiling and Analysis},
author={Open Source Development Lab},
howpublished={\url{http://www.valgrind.org/}},
year={2003},
note={Accessed: 2023-01-27}
}

@misc{VTune,
title={Intel VTune Amplifier},
author={Intel Corporation},
howpublished={\url{https://software.intel.com/en-us/vtune}},
year={2021},
note={Accessed: 2023-01-27}
}

@article{nielson1999type,
  title={Type and effect systems},
  author={Nielson, Flemming and Nielson, Hanne Riis},
  journal={Correct System Design: Recent Insights and Advances},
  pages={114--136},
  year={1999},
  publisher={Springer}
}


@book{laddad2003aspectj,
  title={AspectJ in action: practical aspect-oriented programming},
  author={Laddad, Ramnivas},
  year={2003},
  publisher={Dreamtech Press}
}

@inproceedings{10.1145/73141.74830,
author = {Vogt, H. H. and Swierstra, S. D. and Kuiper, M. F.},
title = {Higher Order Attribute Grammars},
year = {1989},
isbn = {089791306X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/73141.74830},
doi = {10.1145/73141.74830},
abstract = {A new kind of attribute grammars, called higher order attribute grammars, is defined. In higher order attribute grammars the structure tree can be expanded as a result of attribute computation. A structure tree may be stored in an attribute. The term higher order is used because of the analogy with higher order functions, where a function can be the result or parameter of another function. A relatively simple method, using OAGs, is described to derive an evaluation order on the defining attribute occurrences which comprises all possible direct and indirect attribute dependencies. As in OAGs, visit-sequences are computed from which an efficient algorithm for attribute evaluation can be derived.},
booktitle = {Proceedings of the ACM SIGPLAN 1989 Conference on Programming Language Design and Implementation},
pages = {131–145},
numpages = {15},
location = {Portland, Oregon, USA},
series = {PLDI '89}
}


@article{vogt1989higher,
author = {Vogt, H. H. and Swierstra, S. D. and Kuiper, M. F.},
title = {Higher Order Attribute Grammars},
year = {1989},
issue_date = {July 1989},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {7},
issn = {0362-1340},
url = {https://doi.org/10.1145/74818.74830},
doi = {10.1145/74818.74830},
abstract = {A new kind of attribute grammars, called higher order attribute grammars, is defined. In higher order attribute grammars the structure tree can be expanded as a result of attribute computation. A structure tree may be stored in an attribute. The term higher order is used because of the analogy with higher order functions, where a function can be the result or parameter of another function. A relatively simple method, using OAGs, is described to derive an evaluation order on the defining attribute occurrences which comprises all possible direct and indirect attribute dependencies. As in OAGs, visit-sequences are computed from which an efficient algorithm for attribute evaluation can be derived.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {131–145},
numpages = {15}
}


@article{MAGNUSSON200721,
title = {Circular reference attributed grammars — their evaluation and applications},
journal = {Science of Computer Programming},
volume = {68},
number = {1},
pages = {21-37},
year = {2007},
note = {Special Issue on the ETAPS 2003 Workshop on Language Descriptions, Tools and Applications (LDTA ’03)},
issn = {0167-6423},
doi = {https://doi.org/10.1016/j.scico.2005.06.005},
url = {https://www.sciencedirect.com/science/article/pii/S0167642307000767},
author = {Eva Magnusson and Görel Hedin},
keywords = {Attribute grammars, Circular attribute evaluation, Reference attributes, Fixed-point evaluation, Demand-driven evaluation, Grammar flow, Live analysis},
abstract = {This paper presents a combination of Reference Attributed Grammars (RAGs) and Circular Attribute Grammars (CAGs). While RAGs allow the direct and easy specification of nonlocally dependent information, CAGs allow iterative fixed-point computations to be expressed directly using recursive (circular) equations. We demonstrate how the combined formalism, Circular Reference Attributed Grammars (CRAGs), can take advantage of both these strengths, making it possible to express solutions to many problems in an easy way. We exemplify with the specification and computation of the nullable, first, and follow sets used in parser construction, a problem which is highly recursive and normally programmed by hand using an iterative algorithm. We also present a general demand-driven evaluation algorithm for CRAGs and some optimizations of it. The approach has been implemented and experimental results include computations on a series of grammars including that of Java 1.2. We also revisit some of the classical examples of CAGs and show how their solutions are facilitated by CRAGs.}
}


@INPROCEEDINGS{Magnusson2007ExtendingAG,
  author={Magnusson, Eva and Ekman, Torbjorn and Hedin, Gorel},
  booktitle={Seventh IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM 2007)}, 
  title={Extending Attribute Grammars with Collection Attributes--Evaluation and Applications}, 
  year={2007},
  volume={},
  number={},
  pages={69-80},
  doi={10.1109/SCAM.2007.13}}

@article{KrishnamurthiArtifact2013,
author = {Krishnamurthi, Shriram},
title = {Artifact Evaluation for Software Conferences},
year = {2013},
issue_date = {May 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {38},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/2464526.2464530},
doi = {10.1145/2464526.2464530},
abstract = {Software and other digital artifacts are amongst the most valuable contributions of computer science. Yet our conferences treat these mostly as second-class artifacts--especially conferences in the software sciences, which ought to know better. This article argues for elevating these other artifacts by making them part of the evaluation process for papers, and reports on experience from an iteration of an Artifact Evaluation Committee for ESEC/FSE 2011.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {may},
pages = {7–10},
numpages = {4}
}

@article{jasz2019systematic,
  title={Systematic comparison of six open-source Java call graph construction tools},
  author={J{\'a}sz, Judit and Siket, Istv{\'a}n and Peng{\H{o}}, Edit and S{\'a}godi, Zolt{\'a}n and Ferenc, Rudolf},
  year={2019},
  publisher={Science and Technology Press}
}

@inproceedings{bacon1996fast,
  title={Fast static analysis of C++ virtual function calls},
  author={Bacon, David F and Sweeney, Peter F},
  booktitle={Proceedings of the 11th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
  pages={324--341},
  year={1996}
}

@inproceedings{steensgaard1996points,
  author    = {Bjarne Steensgaard},
  title     = {Points-to analysis in almost linear time},
  booktitle = {Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  year      = {1996},
  pages     = {32--41}
}

@INPROCEEDINGS{DuBose2012ReconcilingMA,
  author={Ge, Xi and DuBose, Quinton L. and Murphy-Hill, Emerson},
  booktitle={2012 34th International Conference on Software Engineering (ICSE)}, 
  title={Reconciling manual and automatic refactoring}, 
  year={2012},
  volume={},
  number={},
  pages={211-221},
  doi={10.1109/ICSE.2012.6227192}}

@inproceedings{SootJavaBytecode2010,
author = {Vall\'{e}e-Rai, Raja and Co, Phong and Gagnon, Etienne and Hendren, Laurie and Lam, Patrick and Sundaresan, Vijay},
title = {Soot: A Java Bytecode Optimization Framework},
year = {2010},
publisher = {IBM Corp.},
address = {USA},
url = {https://doi.org/10.1145/1925805.1925818},
doi = {10.1145/1925805.1925818},
abstract = {This paper presents Soot, a framework for optimizing Java* bytecode. The framework is implemented in Java and supports three intermediate representations for representing Java bytecode: Baf, a streamlined representation of bytecode which is simple to manipulate; Jimple, a typed 3-address intermediate representation suitable for optimization; and Grimp, an aggregated version of Jimple suitable for decompilation. We describe the motivation for each representation, and the salient points in translating from one representation to another.In order to demonstrate the usefulness of the framework, we have implemented intraprocedural and whole program optimizations. To show that whole program bytecode optimization can give performance improvements, we provide experimental results for 12 large benchmarks, including 8 SPECjvm98 benchmarks running on JDK 1.2 for GNU/Linuxtm. These results show up to 8% improvement when the optimized bytecode is run using the interpreter and up to 21% when run using the JIT compiler.},
booktitle = {CASCON First Decade High Impact Papers},
pages = {214–224},
numpages = {11},
location = {Toronto, Ontario, Canada},
series = {CASCON '10}
}